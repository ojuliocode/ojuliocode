This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.eslintrc.cjs
.github/workflows/ci.yml
.gitignore
components.json
hooks/use-mobile.tsx
hooks/use-toast.ts
hooks/useMobile.test.ts
hooks/useToast.test.ts
index.html
lib/utils.test.ts
lib/utils.ts
next-env.d.ts
package.json
postcss.config.mjs
public/CNAME
public/placeholder-logo.svg
public/placeholder.svg
README.md
src/App.tsx
src/components/bonus-content.tsx
src/components/BonusContent.test.tsx
src/components/cta-button.tsx
src/components/CTAButton.test.tsx
src/components/Curriculum.test.tsx
src/components/curriculum.tsx
src/components/extra-links-modal.tsx
src/components/sticky-banner.tsx
src/components/Testimonials.test.tsx
src/components/testimonials.tsx
src/components/top-banner.tsx
src/components/TopBanner.test.tsx
src/index.css
src/lib/utils.ts
src/main.tsx
src/setupTests.ts
tailwind.config.js
tsconfig.json
vite.config.js
vite.config.ts
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".eslintrc.cjs">
module.exports = {
  root: true,
  env: { browser: true, es2020: true },
  extends: [
    'eslint:recommended',
    'plugin:react/recommended',
    'plugin:react/jsx-runtime',
    'plugin:react-hooks/recommended',
  ],
  ignorePatterns: ['dist', '.eslintrc.cjs'],
  parserOptions: { ecmaVersion: 'latest', sourceType: 'module' },
  settings: { react: { version: '18.2' } },
  plugins: ['react-refresh'],
  rules: {
    'react-refresh/only-export-components': [
      'warn',
      { allowConstantExport: true },
    ],
  },
}
</file>

<file path="components.json">
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}
</file>

<file path="hooks/use-mobile.tsx">
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}
</file>

<file path="hooks/use-toast.ts">
"use client"

// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }
</file>

<file path="hooks/useMobile.test.ts">
// hooks/useMobile.test.tsx
import { renderHook, act } from '@testing-library/react';
import { useIsMobile } from './use-mobile'; // Adjust path if necessary
import { describe, it, expect, vi, beforeEach, afterEach } from 'vitest';

// Helper to trigger resize/change event
const triggerResize = (width: number) => {
  act(() => {
    window.innerWidth = width;
    // Find the mock addEventListener was called with and trigger its callback
    const matchMediaMock = window.matchMedia as vi.Mock;
    const mqlInstance = matchMediaMock.mock.results[0]?.value; // Get the instance created by the hook
    if (mqlInstance && mqlInstance.addEventListener.mock.calls.length > 0) {
      const changeCallback = mqlInstance.addEventListener.mock.calls.find(
        (call: any) => call[0] === 'change'
      )?.[1];
      if (changeCallback) {
         changeCallback({ matches: width < 768 });
      }
    } else {
      // Fallback if addEventListener wasn't captured properly, directly call onChange logic
       console.warn("Could not find change listener, manually triggering re-render might be needed or check mock setup");
       // In a real component test, you'd likely force a re-render here if needed
    }
  });
};


describe('useIsMobile hook', () => {
  let matchMediaMock: vi.Mock;
  let mqlInstance: {
      matches: boolean;
      media: string;
      addEventListener: vi.Mock;
      removeEventListener: vi.Mock;
  };

  beforeEach(() => {
    // Reset mocks for each test
    mqlInstance = {
        matches: false,
        media: '',
        addEventListener: vi.fn(),
        removeEventListener: vi.fn(),
    };
    matchMediaMock = vi.fn().mockImplementation(query => {
        mqlInstance.media = query;
        // Update matches based on initial innerWidth during mock creation
        mqlInstance.matches = window.innerWidth < 768;
        return mqlInstance;
    });
    vi.stubGlobal('matchMedia', matchMediaMock);
  });

  afterEach(() => {
    vi.restoreAllMocks(); // Restore original implementations
  });

  it('should return false on desktop width initially', () => {
    window.innerWidth = 1024; // Setup width before rendering hook
    const { result } = renderHook(() => useIsMobile());
    expect(result.current).toBe(false);
    expect(matchMediaMock).toHaveBeenCalledWith('(max-width: 767px)');
    expect(mqlInstance.addEventListener).toHaveBeenCalledWith('change', expect.any(Function));
  });

  it('should return true on mobile width initially', () => {
    window.innerWidth = 500; // Setup width before rendering hook
    const { result } = renderHook(() => useIsMobile());
    expect(result.current).toBe(true);
    expect(matchMediaMock).toHaveBeenCalledWith('(max-width: 767px)');
    expect(mqlInstance.addEventListener).toHaveBeenCalledWith('change', expect.any(Function));
  });

  it('should update when window is resized to mobile', () => {
    window.innerWidth = 1024;
    const { result } = renderHook(() => useIsMobile());
    expect(result.current).toBe(false); // Initial desktop

    // Simulate resize to mobile
     act(() => {
       window.innerWidth = 600;
       const changeCallback = mqlInstance.addEventListener.mock.calls[0][1];
       changeCallback(); // Trigger the callback passed to addEventListener
     });

    expect(result.current).toBe(true);
  });

   it('should update when window is resized to desktop', () => {
    window.innerWidth = 600;
    const { result } = renderHook(() => useIsMobile());
    expect(result.current).toBe(true); // Initial mobile

    // Simulate resize to desktop
    act(() => {
       window.innerWidth = 1000;
       const changeCallback = mqlInstance.addEventListener.mock.calls[0][1];
       changeCallback(); // Trigger the callback passed to addEventListener
     });

    expect(result.current).toBe(false);
   });


  it('should clean up event listener on unmount', () => {
    const { unmount } = renderHook(() => useIsMobile());
    expect(mqlInstance.addEventListener).toHaveBeenCalledTimes(1);

    unmount();
    expect(mqlInstance.removeEventListener).toHaveBeenCalledTimes(1);
    expect(mqlInstance.removeEventListener).toHaveBeenCalledWith('change', expect.any(Function));
  });
});
</file>

<file path="hooks/useToast.test.ts">
// hooks/useToast.test.ts
import { describe, it, expect, beforeEach, vi, afterEach } from 'vitest';
import { reducer, toast, useToast, Action } from './use-toast'; // Adjust path
import { act, renderHook } from '@testing-library/react';

// Reset the state before each test if needed (depends on how you manage memoryState)
// This is tricky because state is module-level. A better approach might involve
// exporting a reset function or refactoring state management.
// For simplicity, we'll test the reducer purely and the hook's interactions.

describe('useToast reducer', () => {
  let initialState: { toasts: any[] };

  beforeEach(() => {
    initialState = { toasts: [] };
  });

  it('should add a toast', () => {
    const newToast = { id: '1', title: 'Test', open: true };
    const state = reducer(initialState, { type: 'ADD_TOAST', toast: newToast });
    expect(state.toasts).toHaveLength(1);
    expect(state.toasts[0]).toEqual(newToast);
  });

  it('should limit toasts to TOAST_LIMIT (1)', () => {
     const toast1 = { id: '1', title: 'Toast 1', open: true };
     const toast2 = { id: '2', title: 'Toast 2', open: true };
     let state = reducer(initialState, { type: 'ADD_TOAST', toast: toast1 });
     state = reducer(state, { type: 'ADD_TOAST', toast: toast2 });
     expect(state.toasts).toHaveLength(1);
     expect(state.toasts[0].id).toBe('2'); // Most recent one stays
  });

  it('should update a toast', () => {
    const initialToast = { id: '1', title: 'Initial', open: true };
    const stateWithToast = { toasts: [initialToast] };
    const updatedToast = { id: '1', title: 'Updated', description: 'New Desc' };
    const state = reducer(stateWithToast, { type: 'UPDATE_TOAST', toast: updatedToast });
    expect(state.toasts[0].title).toBe('Updated');
    expect(state.toasts[0].description).toBe('New Desc');
    expect(state.toasts[0].open).toBe(true); // Other props remain
  });

   it('should dismiss a specific toast (set open to false)', () => {
    vi.useFakeTimers(); // Use fake timers for addToRemoveQueue
    const toast1 = { id: '1', title: 'Toast 1', open: true };
    const toast2 = { id: '2', title: 'Toast 2', open: true };
    const stateWithToasts = { toasts: [toast1, toast2] };
    const state = reducer(stateWithToasts, { type: 'DISMISS_TOAST', toastId: '1' });
    expect(state.toasts[0].open).toBe(false);
    expect(state.toasts[1].open).toBe(true);
    // Check if it was added to remove queue (mock setTimeout or spy)
    vi.advanceTimersByTime(1000000); // Advance past TOAST_REMOVE_DELAY
    // Note: Testing the REMOVE_TOAST dispatch requires spying on dispatch or testing the hook directly
    vi.useRealTimers();
   });

   it('should dismiss all toasts', () => {
    vi.useFakeTimers();
    const toast1 = { id: '1', title: 'Toast 1', open: true };
    const toast2 = { id: '2', title: 'Toast 2', open: true };
    const stateWithToasts = { toasts: [toast1, toast2] };
    const state = reducer(stateWithToasts, { type: 'DISMISS_TOAST' }); // No toastId
    expect(state.toasts[0].open).toBe(false);
    expect(state.toasts[1].open).toBe(false);
    vi.useRealTimers();
   });

   it('should remove a specific toast', () => {
      const toast1 = { id: '1', title: 'Toast 1', open: false }; // Assume dismissed
      const toast2 = { id: '2', title: 'Toast 2', open: true };
      const stateWithToasts = { toasts: [toast1, toast2] };
      const state = reducer(stateWithToasts, { type: 'REMOVE_TOAST', toastId: '1' });
      expect(state.toasts).toHaveLength(1);
      expect(state.toasts[0].id).toBe('2');
   });

   it('should remove all toasts', () => {
      const toast1 = { id: '1', title: 'Toast 1', open: false };
      const toast2 = { id: '2', title: 'Toast 2', open: true };
      const stateWithToasts = { toasts: [toast1, toast2] };
      const state = reducer(stateWithToasts, { type: 'REMOVE_TOAST' }); // No toastId
      expect(state.toasts).toHaveLength(0);
   });
});

describe('useToast hook and toast function', () => {
    // Need to reset module state between tests - this is complex.
    // A simpler test focuses on interaction within one test run.
    // Consider refactoring `useToast` for better testability if needed.

    beforeEach(() => {
      // Attempt to reset the module state (might not be fully effective depending on imports)
      vi.resetModules();
      // Re-importing might get fresh state if modules are truly isolated by vi.resetModules()
      // const { toast: freshToast, useToast: freshUseToast } = await import('./use-toast');
      // toast = freshToast;
      // useToast = freshUseToast;
      // This is often problematic. Let's proceed cautiously.
    });

    it('should add a toast via the toast function and reflect in the hook', () => {
        const { result } = renderHook(() => useToast());
        expect(result.current.toasts).toHaveLength(0);

        act(() => {
            toast({ title: 'Hello' });
        });

        // State might not update immediately if dispatch is async or relies on listeners
        // Re-rendering might be needed or checking listener calls
        expect(result.current.toasts).toHaveLength(1);
        expect(result.current.toasts[0].title).toBe('Hello');
        expect(result.current.toasts[0].open).toBe(true);
    });

     it('should dismiss a toast using the hook dismiss function', () => {
        vi.useFakeTimers();
        const { result } = renderHook(() => useToast());
        let toastId: string | undefined;

        act(() => {
          const { id } = toast({ title: 'To Dismiss' });
          toastId = id;
        });

        expect(result.current.toasts).toHaveLength(1);
        expect(result.current.toasts[0].open).toBe(true);


        act(() => {
          result.current.dismiss(toastId);
        });

        expect(result.current.toasts[0].open).toBe(false);

        // Test removal after delay
        act(() => {
           vi.advanceTimersByTime(1000000); // TOAST_REMOVE_DELAY
        });
        // The state update from REMOVE_TOAST might require another act/re-render
        // or checking the listener logic more directly.
        // This demonstrates the complexity of testing module-level state.
        // For now, we check the dismiss action correctly sets 'open' to false.

        vi.useRealTimers();
     });

      it('should dismiss a toast using the returned dismiss function', () => {
        vi.useFakeTimers();
        const { result } = renderHook(() => useToast());
        let dismissFn: (() => void) | undefined;

        act(() => {
          const { dismiss } = toast({ title: 'To Dismiss Direct' });
          dismissFn = dismiss;
        });

        expect(result.current.toasts).toHaveLength(1);
        expect(result.current.toasts[0].open).toBe(true);

        act(() => {
          dismissFn?.();
        });

         expect(result.current.toasts[0].open).toBe(false);
        vi.useRealTimers();
      });

       it('should update a toast using the returned update function', () => {
        const { result } = renderHook(() => useToast());
        let updateFn: ((props: any) => void) | undefined;

        act(() => {
          const { update } = toast({ title: 'Initial Title' });
          updateFn = update;
        });

        expect(result.current.toasts[0].title).toBe('Initial Title');

        act(() => {
          updateFn?.({ title: 'Updated Title' });
        });

        expect(result.current.toasts[0].title).toBe('Updated Title');
      });
});
</file>

<file path="lib/utils.test.ts">
// lib/utils.test.ts
import { describe, it, expect } from 'vitest';
import { cn } from './utils'; // Assuming utils.ts is directly in lib

describe('cn utility', () => {
  it('should merge class names correctly', () => {
    expect(cn('bg-red-500', 'text-white')).toBe('bg-red-500 text-white');
  });

  it('should handle conditional classes', () => {
    const isActive = true;
    const hasError = false;
    expect(cn('base', isActive && 'active', hasError && 'error')).toBe('base active');
  });

  it('should handle object notation', () => {
    expect(cn({ 'bg-blue-500': true, 'text-yellow-300': false }, 'p-4')).toBe('bg-blue-500 p-4');
  });

  it('should handle arrays', () => {
    expect(cn(['p-2', 'm-1'], ['rounded', 'shadow'])).toBe('p-2 m-1 rounded shadow');
  });

  it('should remove falsy values', () => {
    expect(cn('base', null, undefined, false, '', 'extra')).toBe('base extra');
  });

  it('should merge conflicting classes using tailwind-merge', () => {
    // twMerge handles conflicts like padding/margin/bg etc.
    expect(cn('p-4', 'p-2')).toBe('p-2');
    expect(cn('bg-red-500', 'bg-blue-500')).toBe('bg-blue-500');
    expect(cn('px-4 py-2', 'p-3')).toBe('p-3'); // p-3 overrides px-4 and py-2
  });
});
</file>

<file path="lib/utils.ts">
import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
</file>

<file path="next-env.d.ts">
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.
</file>

<file path="postcss.config.mjs">
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;
</file>

<file path="public/CNAME">
ojuliocode.com.br
</file>

<file path="public/placeholder-logo.svg">
<svg xmlns="http://www.w3.org/2000/svg" width="215" height="48" fill="none"><path fill="#000" d="M57.588 9.6h6L73.828 38h-5.2l-2.36-6.88h-11.36L52.548 38h-5.2l10.24-28.4Zm7.16 17.16-4.16-12.16-4.16 12.16h8.32Zm23.694-2.24c-.186-1.307-.706-2.32-1.56-3.04-.853-.72-1.866-1.08-3.04-1.08-1.68 0-2.986.613-3.92 1.84-.906 1.227-1.36 2.947-1.36 5.16s.454 3.933 1.36 5.16c.934 1.227 2.24 1.84 3.92 1.84 1.254 0 2.307-.373 3.16-1.12.854-.773 1.387-1.867 1.6-3.28l5.12.24c-.186 1.68-.733 3.147-1.64 4.4-.906 1.227-2.08 2.173-3.52 2.84-1.413.667-2.986 1-4.72 1-2.08 0-3.906-.453-5.48-1.36-1.546-.907-2.76-2.2-3.64-3.88-.853-1.68-1.28-3.627-1.28-5.84 0-2.24.427-4.187 1.28-5.84.88-1.68 2.094-2.973 3.64-3.88 1.574-.907 3.4-1.36 5.48-1.36 1.68 0 3.227.32 4.64.96 1.414.64 2.56 1.56 3.44 2.76.907 1.2 1.454 2.6 1.64 4.2l-5.12.28Zm11.486-7.72.12 3.4c.534-1.227 1.307-2.173 2.32-2.84 1.04-.693 2.267-1.04 3.68-1.04 1.494 0 2.76.387 3.8 1.16 1.067.747 1.827 1.813 2.28 3.2.507-1.44 1.294-2.52 2.36-3.24 1.094-.747 2.414-1.12 3.96-1.12 1.414 0 2.64.307 3.68.92s1.84 1.52 2.4 2.72c.56 1.2.84 2.667.84 4.4V38h-4.96V25.92c0-1.813-.293-3.187-.88-4.12-.56-.96-1.413-1.44-2.56-1.44-.906 0-1.68.213-2.32.64-.64.427-1.133 1.053-1.48 1.88-.32.827-.48 1.84-.48 3.04V38h-4.56V25.92c0-1.2-.133-2.213-.4-3.04-.24-.827-.626-1.453-1.16-1.88-.506-.427-1.133-.64-1.88-.64-.906 0-1.68.227-2.32.68-.64.427-1.133 1.053-1.48 1.88-.32.827-.48 1.827-.48 3V38h-4.96V16.8h4.48Zm26.723 10.6c0-2.24.427-4.187 1.28-5.84.854-1.68 2.067-2.973 3.64-3.88 1.574-.907 3.4-1.36 5.48-1.36 1.84 0 3.494.413 4.96 1.24 1.467.827 2.64 2.08 3.52 3.76.88 1.653 1.347 3.693 1.4 6.12v1.32h-15.08c.107 1.813.614 3.227 1.52 4.24.907.987 2.134 1.48 3.68 1.48.987 0 1.88-.253 2.68-.76a4.803 4.803 0 0 0 1.84-2.2l5.08.36c-.64 2.027-1.84 3.64-3.6 4.84-1.733 1.173-3.733 1.76-6 1.76-2.08 0-3.906-.453-5.48-1.36-1.573-.907-2.786-2.2-3.64-3.88-.853-1.68-1.28-3.627-1.28-5.84Zm15.16-2.04c-.213-1.733-.76-3.013-1.64-3.84-.853-.827-1.893-1.24-3.12-1.24-1.44 0-2.6.453-3.48 1.36-.88.88-1.44 2.12-1.68 3.72h9.92ZM163.139 9.6V38h-5.04V9.6h5.04Zm8.322 7.2.24 5.88-.64-.36c.32-2.053 1.094-3.56 2.32-4.52 1.254-.987 2.787-1.48 4.6-1.48 2.32 0 4.107.733 5.36 2.2 1.254 1.44 1.88 3.387 1.88 5.84V38h-4.96V25.92c0-1.253-.12-2.28-.36-3.08-.24-.8-.64-1.413-1.2-1.84-.533-.427-1.253-.64-2.16-.64-1.44 0-2.573.48-3.4 1.44-.8.933-1.2 2.307-1.2 4.12V38h-4.96V16.8h4.48Zm30.003 7.72c-.186-1.307-.706-2.32-1.56-3.04-.853-.72-1.866-1.08-3.04-1.08-1.68 0-2.986.613-3.92 1.84-.906 1.227-1.36 2.947-1.36 5.16s.454 3.933 1.36 5.16c.934 1.227 2.24 1.84 3.92 1.84 1.254 0 2.307-.373 3.16-1.12.854-.773 1.387-1.867 1.6-3.28l5.12.24c-.186 1.68-.733 3.147-1.64 4.4-.906 1.227-2.08 2.173-3.52 2.84-1.413.667-2.986 1-4.72 1-2.08 0-3.906-.453-5.48-1.36-1.546-.907-2.76-2.2-3.64-3.88-.853-1.68-1.28-3.627-1.28-5.84 0-2.24.427-4.187 1.28-5.84.88-1.68 2.094-2.973 3.64-3.88 1.574-.907 3.4-1.36 5.48-1.36 1.68 0 3.227.32 4.64.96 1.414.64 2.56 1.56 3.44 2.76.907 1.2 1.454 2.6 1.64 4.2l-5.12.28Zm11.443 8.16V38h-5.6v-5.32h5.6Z"/><path fill="#171717" fill-rule="evenodd" d="m7.839 40.783 16.03-28.054L20 6 0 40.783h7.839Zm8.214 0H40L27.99 19.894l-4.02 7.032 3.976 6.914H20.02l-3.967 6.943Z" clip-rule="evenodd"/></svg>
</file>

<file path="public/placeholder.svg">
<svg xmlns="http://www.w3.org/2000/svg" width="1200" height="1200" fill="none"><rect width="1200" height="1200" fill="#EAEAEA" rx="3"/><g opacity=".5"><g opacity=".5"><path fill="#FAFAFA" d="M600.709 736.5c-75.454 0-136.621-61.167-136.621-136.62 0-75.454 61.167-136.621 136.621-136.621 75.453 0 136.62 61.167 136.62 136.621 0 75.453-61.167 136.62-136.62 136.62Z"/><path stroke="#C9C9C9" stroke-width="2.418" d="M600.709 736.5c-75.454 0-136.621-61.167-136.621-136.62 0-75.454 61.167-136.621 136.621-136.621 75.453 0 136.62 61.167 136.62 136.621 0 75.453-61.167 136.62-136.62 136.62Z"/></g><path stroke="url(#a)" stroke-width="2.418" d="M0-1.209h553.581" transform="scale(1 -1) rotate(45 1163.11 91.165)"/><path stroke="url(#b)" stroke-width="2.418" d="M404.846 598.671h391.726"/><path stroke="url(#c)" stroke-width="2.418" d="M599.5 795.742V404.017"/><path stroke="url(#d)" stroke-width="2.418" d="m795.717 796.597-391.441-391.44"/><path fill="#fff" d="M600.709 656.704c-31.384 0-56.825-25.441-56.825-56.824 0-31.384 25.441-56.825 56.825-56.825 31.383 0 56.824 25.441 56.824 56.825 0 31.383-25.441 56.824-56.824 56.824Z"/><g clip-path="url(#e)"><path fill="#666" fill-rule="evenodd" d="M616.426 586.58h-31.434v16.176l3.553-3.554.531-.531h9.068l.074-.074 8.463-8.463h2.565l7.18 7.181V586.58Zm-15.715 14.654 3.698 3.699 1.283 1.282-2.565 2.565-1.282-1.283-5.2-5.199h-6.066l-5.514 5.514-.073.073v2.876a2.418 2.418 0 0 0 2.418 2.418h26.598a2.418 2.418 0 0 0 2.418-2.418v-8.317l-8.463-8.463-7.181 7.181-.071.072Zm-19.347 5.442v4.085a6.045 6.045 0 0 0 6.046 6.045h26.598a6.044 6.044 0 0 0 6.045-6.045v-7.108l1.356-1.355-1.282-1.283-.074-.073v-17.989h-38.689v23.43l-.146.146.146.147Z" clip-rule="evenodd"/></g><path stroke="#C9C9C9" stroke-width="2.418" d="M600.709 656.704c-31.384 0-56.825-25.441-56.825-56.824 0-31.384 25.441-56.825 56.825-56.825 31.383 0 56.824 25.441 56.824 56.825 0 31.383-25.441 56.824-56.824 56.824Z"/></g><defs><linearGradient id="a" x1="554.061" x2="-.48" y1=".083" y2=".087" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="b" x1="796.912" x2="404.507" y1="599.963" y2="599.965" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="c" x1="600.792" x2="600.794" y1="403.677" y2="796.082" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="d" x1="404.85" x2="796.972" y1="403.903" y2="796.02" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><clipPath id="e"><path fill="#fff" d="M581.364 580.535h38.689v38.689h-38.689z"/></clipPath></defs></svg>
</file>

<file path="src/components/bonus-content.tsx">
"use client"

import { useState } from "react"
import { FileText, Gift } from "lucide-react"
import { cn } from "../lib/utils"

const bonusContent = [
  {
    title: "1. Montar um currículo",
    topics: [
      "Montando um currículo do zero",
      "O que as empresas querem",
      "Informações relevantes para o CV",
      "O que é necessário e no sobre mim",
      "Devo colocar cursos?",
    ],
  },
  {
    title: "2. Linkedin",
    topics: [
      "Como interagir no linkedin",
      "Criando o melhor perfil do Linkedin",
      "Como fazer uma publicação",
      "Como alcançar os recrutadores",
    ],
  },
]

export function BonusContent() {
  const [expandedBonus, setExpandedBonus] = useState<number | null>(null)

  const toggleBonus = (index: number) => {
    setExpandedBonus(expandedBonus === index ? null : index)
  }

  return (
    <section className="py-20 bg-sky-50">
      <div className="container mx-auto px-4">
        <div className="text-center mb-12">
          <div className="inline-flex items-center justify-center p-2 bg-purple-100 rounded-full mb-4">
            <Gift className="h-6 w-6 text-purple-500" />
          </div>
          <h2 className="text-3xl font-bold mb-2 text-gray-800">Extra!</h2>
          <div className="w-20 h-1 bg-purple-500 mx-auto"></div>
          <p className="mt-4 text-gray-600 max-w-2xl mx-auto">
            Conteúdo bônus para ajudar você a se destacar no mercado de trabalho
          </p>
        </div>

        <div className="max-w-3xl mx-auto">
          <div className="bg-white rounded-lg p-6 border border-purple-200 shadow-lg">
            <div className="space-y-4">
              {bonusContent.map((bonus, index) => (
                <div key={index} className="border border-gray-200 rounded-md overflow-hidden">
                  <button
                    onClick={() => toggleBonus(index)}
                    className={cn(
                      "w-full flex items-center gap-3 p-4 text-left transition-colors",
                      expandedBonus === index ? "bg-purple-100" : "bg-white hover:bg-gray-50",
                    )}
                  >
                    <FileText className="h-5 w-5 text-purple-500" />
                    <span className="font-medium text-gray-700">{bonus.title}</span>
                  </button>

                  {expandedBonus === index && (
                    <div className="p-4 space-y-2 bg-gray-50">
                      {bonus.topics.map((topic, topicIndex) => (
                        <div key={topicIndex} className="flex items-start gap-2">
                          <div className="w-1.5 h-1.5 rounded-full bg-purple-500 mt-2"></div>
                          <span className="text-sm text-gray-600">{topic}</span>
                        </div>
                      ))}
                    </div>
                  )}
                </div>
              ))}
            </div>

            <div className="mt-8 p-4 border border-dashed border-purple-300 rounded-md bg-purple-50">
              <div className="flex items-center gap-3">
                <div className="p-2 bg-purple-100 rounded-full">
                  <Gift className="h-5 w-5 text-purple-500" />
                </div>
                <div>
                  <h4 className="font-medium text-gray-800">Bônus exclusivos</h4>
                  <p className="text-sm text-gray-600">Conteúdo adicional para impulsionar sua carreira</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  )
}
</file>

<file path="src/components/BonusContent.test.tsx">
// src/components/BonusContent.test.tsx
import { render, screen } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import { describe, it, expect } from 'vitest';
import { BonusContent } from './bonus-content';

describe('BonusContent', () => {
  const user = userEvent.setup();

  it('renders the main title and description', () => {
    render(<BonusContent />);
    expect(screen.getByRole('heading', { name: /Extra!/i })).toBeInTheDocument();
    expect(screen.getByText(/Conteúdo bônus para ajudar você a se destacar/i)).toBeInTheDocument();
  });

  it('renders bonus sections collapsed initially', () => {
    render(<BonusContent />);
    expect(screen.getByRole('button', { name: /1\. Montar um currículo/i })).toBeInTheDocument();
    expect(screen.getByRole('button', { name: /2\. Linkedin/i })).toBeInTheDocument();

    // Check topics are hidden
    expect(screen.queryByText(/Montando um currículo do zero/i)).not.toBeInTheDocument();
    expect(screen.queryByText(/Como interagir no linkedin/i)).not.toBeInTheDocument();
  });

  it('expands a bonus section on click', async () => {
    render(<BonusContent />);
    const curriculumButton = screen.getByRole('button', { name: /1\. Montar um currículo/i });

    expect(screen.queryByText(/Montando um currículo do zero/i)).not.toBeInTheDocument();

    await user.click(curriculumButton);

    expect(screen.getByText(/Montando um currículo do zero/i)).toBeInTheDocument();
    expect(screen.getByText(/O que as empresas querem/i)).toBeInTheDocument();
  });

  it('collapses a bonus section on clicking again', async () => {
    render(<BonusContent />);
    const curriculumButton = screen.getByRole('button', { name: /1\. Montar um currículo/i });

    // Expand
    await user.click(curriculumButton);
    expect(screen.getByText(/Montando um currículo do zero/i)).toBeInTheDocument();

    // Collapse
    await user.click(curriculumButton);
    expect(screen.queryByText(/Montando um currículo do zero/i)).not.toBeInTheDocument();
  });

   it('expands only the clicked bonus section', async () => {
    render(<BonusContent />);
    const curriculumButton = screen.getByRole('button', { name: /1\. Montar um currículo/i });
    const linkedinButton = screen.getByRole('button', { name: /2\. Linkedin/i });

    // Expand Curriculum
    await user.click(curriculumButton);
    expect(screen.getByText(/Montando um currículo do zero/i)).toBeInTheDocument();
    expect(screen.queryByText(/Como interagir no linkedin/i)).not.toBeInTheDocument(); // Linkedin topics hidden

    // Click Linkedin (should collapse Curriculum and expand Linkedin)
    await user.click(linkedinButton);
    expect(screen.queryByText(/Montando um currículo do zero/i)).not.toBeInTheDocument(); // Curriculum topics hidden
    expect(screen.getByText(/Como interagir no linkedin/i)).toBeInTheDocument(); // Linkedin topics visible
  });

  it('renders the final bonus box', () => {
     render(<BonusContent />);
     expect(screen.getByText(/Bônus exclusivos/i)).toBeInTheDocument();
     expect(screen.getByText(/Conteúdo adicional para impulsionar sua carreira/i)).toBeInTheDocument();
  });
});
</file>

<file path="src/components/cta-button.tsx">
import { cn } from "../lib/utils"

interface CTAButtonProps {
  text: string
  href: string
  primary?: boolean
  large?: boolean
}

export function CTAButton({ text, href, primary, large }: CTAButtonProps) {
  return (
    <a
      href={href}
      className={cn(
        "relative inline-flex items-center justify-center px-6 py-3 overflow-hidden font-medium transition-all rounded-md group",
        large && "px-8 py-4 text-lg",
        primary
          ? "bg-sky-500 text-white hover:bg-sky-600"
          : "bg-transparent border border-sky-300 text-gray-700 hover:bg-sky-50",
      )}
    >
      {primary && (
        <>
          <span className="absolute top-0 left-0 w-full h-full bg-gradient-to-r from-sky-400/0 via-sky-400/30 to-sky-400/0 group-hover:animate-shimmer"></span>
          <span className="absolute bottom-0 left-0 h-1 bg-sky-600"></span>
        </>
      )}
      <span className="relative">{text}</span>
    </a>
  )
}
</file>

<file path="src/components/CTAButton.test.tsx">
// src/components/CTAButton.test.tsx
import { render, screen } from '@testing-library/react';
import { describe, it, expect } from 'vitest';
import { CTAButton } from './cta-button'; // Adjust path

describe('CTAButton', () => {
  const defaultProps = {
    text: 'Click Me',
    href: 'https://example.com',
  };

  it('renders the button with correct text and href', () => {
    render(<CTAButton {...defaultProps} />);
    const linkElement = screen.getByRole('link', { name: defaultProps.text });
    expect(linkElement).toBeInTheDocument();
    expect(linkElement).toHaveAttribute('href', defaultProps.href);
    expect(linkElement).toHaveTextContent(defaultProps.text);
  });

  it('applies primary styles when primary prop is true', () => {
    render(<CTAButton {...defaultProps} primary />);
    const linkElement = screen.getByRole('link', { name: defaultProps.text });
    // Check for classes indicative of primary style (adjust based on your actual implementation)
    expect(linkElement).toHaveClass(/bg-sky-500/); // Check for primary background
    expect(linkElement).toHaveClass(/text-white/); // Check for primary text color
    expect(linkElement).not.toHaveClass(/border-sky-300/); // Should not have border class
    // Check for shimmer elements if needed (might be implementation detail)
    // expect(linkElement.querySelector('.group-hover\\:animate-shimmer')).toBeInTheDocument();
  });

  it('applies secondary styles when primary prop is false or omitted', () => {
    render(<CTAButton {...defaultProps} />);
    const linkElement = screen.getByRole('link', { name: defaultProps.text });
    // Check for classes indicative of secondary style
    expect(linkElement).toHaveClass(/border-sky-300/); // Check for border
    expect(linkElement).toHaveClass(/text-gray-700/); // Check for secondary text color
    expect(linkElement).not.toHaveClass(/bg-sky-500/); // Should not have primary background
  });

   it('applies large styles when large prop is true', () => {
    render(<CTAButton {...defaultProps} large />);
    const linkElement = screen.getByRole('link', { name: defaultProps.text });
    // Check for classes indicative of large size (e.g., px-8, py-4, text-lg)
    // UsingtoContain because other classes might be present
    expect(linkElement.className).toContain('px-8');
    expect(linkElement.className).toContain('py-4');
    expect(linkElement.className).toContain('text-lg');
   });

   it('does not apply large styles when large prop is false or omitted', () => {
    render(<CTAButton {...defaultProps} />);
    const linkElement = screen.getByRole('link', { name: defaultProps.text });
    // Check that large classes are NOT present
    expect(linkElement.className).not.toContain('px-8');
    expect(linkElement.className).not.toContain('py-4');
    expect(linkElement.className).not.toContain('text-lg');
   });
});
</file>

<file path="src/components/Curriculum.test.tsx">
// src/components/Curriculum.test.tsx
import { render, screen } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import { describe, it, expect } from 'vitest';
import { Curriculum } from './curriculum';

describe('Curriculum', () => {
  const user = userEvent.setup();

  it('renders the main title', () => {
    render(<Curriculum />);
    expect(screen.getByRole('heading', { name: /O que vou aprender neste manual?/i })).toBeInTheDocument();
  });

  it('renders all technology sections collapsed initially', () => {
    render(<Curriculum />);
    expect(screen.getByRole('button', { name: /HTML/i })).toBeInTheDocument();
    expect(screen.getByRole('button', { name: /CSS/i })).toBeInTheDocument();
    expect(screen.getByRole('button', { name: /JavaScript \(JS\)/i })).toBeInTheDocument();
    expect(screen.getByRole('button', { name: /React/i })).toBeInTheDocument();
    expect(screen.getByRole('button', { name: /Git/i })).toBeInTheDocument();

    // Check that module titles are NOT visible initially
    expect(screen.queryByText(/1\. Introdução ao HTML/i)).not.toBeInTheDocument();
    expect(screen.queryByText(/4\. Introdução ao CSS/i)).not.toBeInTheDocument();
  });

  it('expands a technology section on click', async () => {
    render(<Curriculum />);
    const htmlButton = screen.getByRole('button', { name: /HTML/i });

    expect(screen.queryByText(/1\. Introdução ao HTML/i)).not.toBeInTheDocument(); // Module title hidden

    await user.click(htmlButton);

    expect(screen.getByText(/1\. Introdução ao HTML/i)).toBeInTheDocument(); // Module title visible
    expect(screen.getByText(/2\. Aprofundando/i)).toBeInTheDocument();
    expect(screen.getByText(/3\. Listas/i)).toBeInTheDocument();

    // Check that topics are still hidden
    expect(screen.queryByText(/Primeiro contato com tags/i)).not.toBeInTheDocument();
  });

  it('collapses a technology section on clicking again', async () => {
    render(<Curriculum />);
    const htmlButton = screen.getByRole('button', { name: /HTML/i });

    // Expand first
    await user.click(htmlButton);
    expect(screen.getByText(/1\. Introdução ao HTML/i)).toBeInTheDocument();

    // Collapse
    await user.click(htmlButton);
    expect(screen.queryByText(/1\. Introdução ao HTML/i)).not.toBeInTheDocument();
  });

  it('expands a module within an expanded technology section', async () => {
    render(<Curriculum />);
    const htmlButton = screen.getByRole('button', { name: /HTML/i });
    await user.click(htmlButton); // Expand HTML

    const module1Button = screen.getByRole('button', { name: /1\. Introdução ao HTML/i });
    expect(screen.queryByText(/Primeiro contato com tags/i)).not.toBeInTheDocument(); // Topic hidden

    await user.click(module1Button);

    expect(screen.getByText(/Primeiro contato com tags/i)).toBeInTheDocument(); // Topic visible
    expect(screen.getByText(/Tags semânticas/i)).toBeInTheDocument();
  });

  it('collapses a module on clicking again', async () => {
    render(<Curriculum />);
    const htmlButton = screen.getByRole('button', { name: /HTML/i });
    await user.click(htmlButton); // Expand HTML

    const module1Button = screen.getByRole('button', { name: /1\. Introdução ao HTML/i });
    await user.click(module1Button); // Expand Module 1
    expect(screen.getByText(/Primeiro contato com tags/i)).toBeInTheDocument();

    await user.click(module1Button); // Collapse Module 1
    expect(screen.queryByText(/Primeiro contato com tags/i)).not.toBeInTheDocument();
  });

   it('keeps other technology sections collapsed when one is expanded', async () => {
    render(<Curriculum />);
    const htmlButton = screen.getByRole('button', { name: /HTML/i });
    await user.click(htmlButton);

    expect(screen.getByText(/1\. Introdução ao HTML/i)).toBeInTheDocument();
    // Check that CSS module is still hidden
    expect(screen.queryByText(/4\. Introdução ao CSS/i)).not.toBeInTheDocument();
   });

    it('expands and collapses different sections independently', async () => {
        render(<Curriculum />);
        const htmlButton = screen.getByRole('button', { name: /HTML/i });
        const cssButton = screen.getByRole('button', { name: /CSS/i });

        // Expand HTML
        await user.click(htmlButton);
        expect(screen.getByText(/1\. Introdução ao HTML/i)).toBeInTheDocument();
        expect(screen.queryByText(/4\. Introdução ao CSS/i)).not.toBeInTheDocument();

        // Expand CSS
        await user.click(cssButton);
        expect(screen.getByText(/1\. Introdução ao HTML/i)).toBeInTheDocument(); // HTML should remain open
        expect(screen.getByText(/4\. Introdução ao CSS/i)).toBeInTheDocument(); // CSS now open

        // Collapse HTML
        await user.click(htmlButton);
        expect(screen.queryByText(/1\. Introdução ao HTML/i)).not.toBeInTheDocument(); // HTML now closed
        expect(screen.getByText(/4\. Introdução ao CSS/i)).toBeInTheDocument(); // CSS remains open
    });
});
</file>

<file path="src/components/sticky-banner.tsx">
"use client"

import { useState, useEffect } from "react"
import { AlertTriangle } from "lucide-react"

export function StickyBanner() {
  const [isVisible, setIsVisible] = useState(false)

  useEffect(() => {
    const handleScroll = () => {
      if (window.scrollY > 500) {
        setIsVisible(true)
      } else {
        setIsVisible(false)
      }
    }

    window.addEventListener("scroll", handleScroll)
    return () => window.removeEventListener("scroll", handleScroll)
  }, [])

  if (!isVisible) return null

  return (
    <div className="fixed bottom-0 left-0 right-0 bg-white border-t border-sky-200 py-3 px-4 z-50 backdrop-blur-sm bg-opacity-90 shadow-md">
      <div className="container mx-auto flex flex-col sm:flex-row items-center justify-between gap-3">
        <div className="flex items-center">
          <AlertTriangle className="h-5 w-5 text-sky-500 mr-2" />
          <p className="text-sm font-medium">⚠️ Oferta limitada. Torne-se um desenvolvedor frontend hoje mesmo</p>
        </div>
        <a
          href="https://pay.hotmart.com/Y88783634B"
          className="px-4 py-2 bg-sky-500 text-white rounded-md text-sm font-medium hover:bg-sky-600 transition-colors whitespace-nowrap"
        >
          Quero garantir a oferta
        </a>
      </div>
    </div>
  )
}
</file>

<file path="src/components/Testimonials.test.tsx">
// src/components/Testimonials.test.tsx
import { render, screen } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import { describe, it, expect } from 'vitest';
import { Testimonials } from './testimonials';

// Mock the testimonials array if needed, or use the one imported
// For simplicity, we assume the component imports the actual array
const testimonialsContent = [
  "Terminei de estudar o ebook hoje, e posso te falar que é o melhor conteúdo de programação a esse preço!!",
  "Parabéns pelo trabalho com o youtube e o conteúdo 👏👏",
  "Parabéns pelo conteúdo, muito bom",
  "Um dos melhores conteúdos de programação aqui no insta ❤️",
  "Eai brother. Queria te passar o feedback sobre o seu livro. Muito bom, explicação clara e completa",
  "Comprei há um tempo e comecei a estudar agora. Parabéns pela clareza nas explicações. Muito sucesso você vai longe 👍 👍",
  "Nunca vi alguém com um conteúdo tão completo com esse preço. Com certeza está ajudando muita gente",
  "Gostei muito do ebook. Está me ajudando muito.",
];

describe('Testimonials', () => {
  it('renders the section title', () => {
    render(<Testimonials />);
    expect(screen.getByRole('heading', { name: /Mensagens que recebo no Instagram/i })).toBeInTheDocument();
  });

  it('renders the first testimonial initially', () => {
    render(<Testimonials />);
    expect(screen.getByText(`"${testimonialsContent[0]}"`)).toBeInTheDocument();
  });

  it('renders navigation buttons', () => {
    render(<Testimonials />);
    // Using aria-label or title would be better if added to buttons
    // Otherwise, find by role and potentially content/icon if distinguishable
    const buttons = screen.getAllByRole('button');
    // Expecting 2 navigation buttons (prev/next)
    expect(buttons.length).toBeGreaterThanOrEqual(2);
    // Check for presence of icons if possible (e.g., via class or rendered SVG structure)
  });

  it('navigates to the next testimonial on next button click', async () => {
    const user = userEvent.setup();
    render(<Testimonials />);

    expect(screen.getByText(`"${testimonialsContent[0]}"`)).toBeInTheDocument();

    const buttons = screen.getAllByRole('button');
    const nextButton = buttons.find(btn => btn.querySelector('svg.lucide-chevron-right')); // Find based on icon
    expect(nextButton).toBeDefined();

    await user.click(nextButton!);

    expect(screen.getByText(`"${testimonialsContent[1]}"`)).toBeInTheDocument();
    expect(screen.queryByText(`"${testimonialsContent[0]}"`)).not.toBeInTheDocument();
  });

  it('navigates to the previous testimonial on previous button click', async () => {
    const user = userEvent.setup();
    render(<Testimonials />);

    // Go to the second testimonial first
    const buttons = screen.getAllByRole('button');
    const nextButton = buttons.find(btn => btn.querySelector('svg.lucide-chevron-right'));
    await user.click(nextButton!);
    expect(screen.getByText(`"${testimonialsContent[1]}"`)).toBeInTheDocument();

    // Now click previous
    const prevButton = buttons.find(btn => btn.querySelector('svg.lucide-chevron-left'));
     expect(prevButton).toBeDefined();
    await user.click(prevButton!);

    expect(screen.getByText(`"${testimonialsContent[0]}"`)).toBeInTheDocument();
    expect(screen.queryByText(`"${testimonialsContent[1]}"`)).not.toBeInTheDocument();
  });

  it('wraps around to the last testimonial when clicking previous on the first item', async () => {
    const user = userEvent.setup();
    render(<Testimonials />);

    expect(screen.getByText(`"${testimonialsContent[0]}"`)).toBeInTheDocument();

    const buttons = screen.getAllByRole('button');
    const prevButton = buttons.find(btn => btn.querySelector('svg.lucide-chevron-left'));
    expect(prevButton).toBeDefined();

    await user.click(prevButton!);

    // Should now show the last testimonial
    const lastIndex = testimonialsContent.length - 1;
    expect(screen.getByText(`"${testimonialsContent[lastIndex]}"`)).toBeInTheDocument();
    expect(screen.queryByText(`"${testimonialsContent[0]}"`)).not.toBeInTheDocument();
  });

  it('wraps around to the first testimonial when clicking next on the last item', async () => {
     const user = userEvent.setup();
     render(<Testimonials />);
     const buttons = screen.getAllByRole('button');
     const nextButton = buttons.find(btn => btn.querySelector('svg.lucide-chevron-right'));
     expect(nextButton).toBeDefined();

     // Click next until we are at the last item
     for (let i = 0; i < testimonialsContent.length - 1; i++) {
       await user.click(nextButton!);
     }

     const lastIndex = testimonialsContent.length - 1;
     expect(screen.getByText(`"${testimonialsContent[lastIndex]}"`)).toBeInTheDocument();

     // Click next one more time
     await user.click(nextButton!);

     // Should wrap around to the first item
     expect(screen.getByText(`"${testimonialsContent[0]}"`)).toBeInTheDocument();
     expect(screen.queryByText(`"${testimonialsContent[lastIndex]}"`)).not.toBeInTheDocument();
  });

  it('updates indicator dots correctly', async () => {
    const user = userEvent.setup();
    render(<Testimonials />);

    // Find the container for the dots (might need a test-id or specific selector)
    // Assuming dots are divs and the active one has 'bg-sky-500'
    let dots = screen.getAllByRole('generic', { name: '' }).filter(el => el.className.includes('w-2 h-2 rounded-full')); // A bit fragile selector
    expect(dots).toHaveLength(testimonialsContent.length);
    expect(dots[0]).toHaveClass('bg-sky-500');
    expect(dots[1]).toHaveClass('bg-gray-300');

    const buttons = screen.getAllByRole('button');
    const nextButton = buttons.find(btn => btn.querySelector('svg.lucide-chevron-right'));
    await user.click(nextButton!);

    // Re-query dots after state update
    dots = screen.getAllByRole('generic', { name: '' }).filter(el => el.className.includes('w-2 h-2 rounded-full'));
    expect(dots[0]).toHaveClass('bg-gray-300');
    expect(dots[1]).toHaveClass('bg-sky-500');
  });
});
</file>

<file path="src/components/testimonials.tsx">
"use client"

import { useState } from "react"
import { ChevronLeft, ChevronRight, MessageSquare } from "lucide-react"

const testimonials = [
  "Terminei de estudar o ebook hoje, e posso te falar que é o melhor conteúdo de programação a esse preço!!",
  "Parabéns pelo trabalho com o youtube e o conteúdo 👏👏",
  "Parabéns pelo conteúdo, muito bom",
  "Um dos melhores conteúdos de programação aqui no insta ❤️",
  "Eai brother. Queria te passar o feedback sobre o seu livro. Muito bom, explicação clara e completa",
  "Comprei há um tempo e comecei a estudar agora. Parabéns pela clareza nas explicações. Muito sucesso você vai longe 👍 👍",
  "Nunca vi alguém com um conteúdo tão completo com esse preço. Com certeza está ajudando muita gente",
  "Gostei muito do ebook. Está me ajudando muito.",
]

export function Testimonials() {
  const [currentIndex, setCurrentIndex] = useState(0)

  const nextTestimonial = () => {
    setCurrentIndex((prev) => (prev + 1) % testimonials.length)
  }

  const prevTestimonial = () => {
    setCurrentIndex((prev) => (prev - 1 + testimonials.length) % testimonials.length)
  }

  return (
    <section className="py-20 bg-sky-50">
      <div className="container mx-auto px-4">
        <div className="text-center mb-12">
          <h2 className="text-3xl font-bold mb-2 text-gray-800">Mensagens que recebo no Instagram</h2>
          <div className="w-20 h-1 bg-sky-500 mx-auto"></div>
        </div>

        <div className="max-w-3xl mx-auto">
          <div className="relative bg-white rounded-lg p-8 border border-sky-200 shadow-lg">
            <div className="absolute -top-4 -left-4 bg-sky-500 rounded-full p-2">
              <MessageSquare className="h-6 w-6 text-white" />
            </div>

            <div className="min-h-[120px] flex items-center justify-center">
              <p className="text-lg text-center italic text-gray-700">"{testimonials[currentIndex]}"</p>
            </div>

            <div className="flex justify-center mt-6 gap-4">
              <button
                onClick={prevTestimonial}
                className="p-2 rounded-full border border-gray-200 hover:bg-sky-50 transition-colors"
              >
                <ChevronLeft className="h-5 w-5 text-gray-600" />
              </button>
              <div className="flex items-center gap-1">
                {testimonials.map((_, i) => (
                  <div
                    key={i}
                    className={`w-2 h-2 rounded-full ${i === currentIndex ? "bg-sky-500" : "bg-gray-300"}`}
                  ></div>
                ))}
              </div>
              <button
                onClick={nextTestimonial}
                className="p-2 rounded-full border border-gray-200 hover:bg-sky-50 transition-colors"
              >
                <ChevronRight className="h-5 w-5 text-gray-600" />
              </button>
            </div>
          </div>
        </div>
      </div>
    </section>
  )
}
</file>

<file path="src/components/top-banner.tsx">
"use client"

import { useState } from "react"
import { X } from "lucide-react"

export function TopBanner() {
  const [isVisible, setIsVisible] = useState(true)

  if (!isVisible) return null

  return (
    <div className="bg-sky-500 text-white py-2 px-4 text-center relative">
      <p className="font-medium">Esta página foi criada usando ensinamentos do Magic Front</p>
      <button
        onClick={() => setIsVisible(false)}
        className="absolute right-2 top-1/2 transform -translate-y-1/2 text-white/70 hover:text-white"
      >
        <X className="h-4 w-4" />
      </button>
    </div>
  )
}
</file>

<file path="src/components/TopBanner.test.tsx">
// src/components/TopBanner.test.tsx
import { render, screen } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import { describe, it, expect } from 'vitest';
import { TopBanner } from './top-banner';

describe('TopBanner', () => {
  it('renders the banner text initially', () => {
    render(<TopBanner />);
    expect(screen.getByText('Esta página foi criada usando ensinamentos do Magic Front')).toBeInTheDocument();
  });

  it('renders the close button', () => {
    render(<TopBanner />);
    // Use title or aria-label if the button has one, otherwise query by role and check content
    // Assuming the <X> icon renders as an SVG, targeting the button role is best
    expect(screen.getByRole('button')).toBeInTheDocument();
  });

  it('hides the banner when the close button is clicked', async () => {
    const user = userEvent.setup();
    render(<TopBanner />);

    const bannerText = screen.getByText('Esta página foi criada usando ensinamentos do Magic Front');
    const closeButton = screen.getByRole('button');

    expect(bannerText).toBeInTheDocument(); // Initially visible

    await user.click(closeButton);

    // After clicking, the component should return null, so the text is gone
    expect(screen.queryByText('Esta página foi criada usando ensinamentos do Magic Front')).not.toBeInTheDocument();
  });
});
</file>

<file path="src/lib/utils.ts">
import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
</file>

<file path="src/main.tsx">
import React from "react"
import ReactDOM from "react-dom/client"
import App from "./App.tsx"
import "./index.css"

ReactDOM.createRoot(document.getElementById("root")!).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
)
</file>

<file path="src/setupTests.ts">
// src/setupTests.ts
import '@testing-library/jest-dom/vitest'; // Extends expect with jest-dom matchers
import { vi } from 'vitest';

// Mock matchMedia for components/hooks that use it (like useMobile)
Object.defineProperty(window, 'matchMedia', {
  writable: true,
  value: vi.fn().mockImplementation(query => ({
    matches: false, // Default value
    media: query,
    onchange: null,
    addListener: vi.fn(), // Deprecated but sometimes used
    removeListener: vi.fn(), // Deprecated but sometimes used
    addEventListener: vi.fn(),
    removeEventListener: vi.fn(),
    dispatchEvent: vi.fn(),
  })),
});

// Mock window.innerWidth for useMobile
Object.defineProperty(window, 'innerWidth', {
  writable: true,
  configurable: true,
  value: 1024, // Default to desktop width
});

// Mock scrollY for StickyBanner logic (if needed directly in tests)
Object.defineProperty(window, 'scrollY', {
  writable: true,
  configurable: true,
  value: 0,
});

// You might need to mock other browser APIs if your components use them
// Example: IntersectionObserver
// const IntersectionObserverMock = vi.fn(() => ({
//   disconnect: vi.fn(),
//   observe: vi.fn(),
//   takeRecords: vi.fn(),
//   unobserve: vi.fn(),
// }));
// vi.stubGlobal('IntersectionObserver', IntersectionObserverMock);

// Clean up mocks after each test
// afterEach(() => {
//   vi.clearAllMocks();
// });
</file>

<file path="tailwind.config.js">
/** @type {import('tailwindcss').Config} */
module.exports = {
  darkMode: ["class"],
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
    "*.{js,ts,jsx,tsx,mdx}",
    "app/**/*.{ts,tsx}",
    "components/**/*.{ts,tsx}",
  ],
  theme: {
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
          // DEFAULT: "#0ea5e9", // sky-500
          // foreground: "#ffffff",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      animation: {
        shimmer: "shimmer 1.5s infinite",
      },
      keyframes: {
        shimmer: {
          "0%": { transform: "translateX(-100%)" },
          "100%": { transform: "translateX(100%)" },
        },
      },
    },
  },
  plugins: [require("tailwindcss-animate")],
}
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "target": "ES6",
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
</file>

<file path="src/components/curriculum.tsx">
"use client"

import { useState } from "react"
import { ChevronDown, Code, GitBranch, Globe, Layers } from "lucide-react"
import { cn } from "../lib/utils"

const curriculum = [
  {
    name: "HTML",
    icon: <Globe className="h-5 w-5" />,
    color: "text-orange-500",
    bgColor: "bg-orange-100",
    borderColor: "border-orange-200",
    modules: [
      {
        title: "1. Introdução ao HTML",
        topics: [
          "Primeiro contato com tags",
          "Tags semânticas",
          "Como criar um parágrafo",
          "Diferentes tipos de título",
          "Textos e formatação",
        ],
      },
      {
        title: "2. Aprofundando",
        topics: ["Atributos", "Como inserir uma classe", "Nesting", "Tags não semânticas", "lorem"],
      },
      {
        title: "3. Listas",
        topics: ["Listas ordenadas", "Listas não ordenadas", "Atributo type de listas", "Mini Projeto 1"],
      },
    ],
  },
  {
    name: "CSS",
    icon: <Layers className="h-5 w-5" />,
    color: "text-blue-500",
    bgColor: "bg-blue-100",
    borderColor: "border-blue-200",
    modules: [
      {
        title: "4. Introdução ao CSS",
        topics: [
          "CSS inline",
          "Mudando cores de texto",
          "Aplicando estilo à cor de fundo",
          "Transformando textos em negrito",
          "Ênfase",
          "CSS em arquivos separados",
        ],
      },
      {
        title: "5. Aprofundando",
        topics: [
          "Introdução a seletores",
          "Seletor de classe",
          "Como concatenar seletores",
          "Seletor ID",
          "Encadeamento de seletores",
        ],
      },
      {
        title: "6. Box Model",
        topics: [
          "Introdução ao modelo de caixas",
          "Como funciona o box model",
          "Aplicando borda nas caixas",
          "Aplicando margin nas caixas",
          "Como funciona o padding",
        ],
      },
      {
        title: "7. Tipos de caixas",
        topics: ["Como funciona a caixa block", "Funcionamento do modelo inline", "Como alinhar elementos inline"],
      },
      {
        title: "8. Flexbox",
        topics: [
          "Como funciona o display: flex",
          "Distribuindo elementos na horizontal",
          "Alinhamento de elementos na horizontal",
          "Propriedade justify-content",
          "Como alinhar elementos na vertical",
          "Criando um projeto com HTML e CSS",
        ],
      },
    ],
  },
  {
    name: "JavaScript (JS)",
    icon: <Code className="h-5 w-5" />,
    color: "text-yellow-600",
    bgColor: "bg-yellow-100",
    borderColor: "border-yellow-200",
    modules: [
      {
        title: "9. Introdução ao JS",
        topics: [
          "Variáveis",
          "Diferença entre variáveis e constantes",
          "Como executar meu primeiro código JS",
          "Visualização de dados no javascript",
        ],
      },
      {
        title: "10. Tipos de dados",
        topics: ["Números e manipulações", "Cadeias de caracteres (strings)", "Como funcionam arrays"],
      },
      {
        title: "11. Condicionais",
        topics: ["O que é um condicional", "Valores true e false", "Comentários de código", "if, else, else if"],
      },
      {
        title: "12. Métodos",
        topics: ["O que são métodos", "Como chamar um método", "Como acessar propriedades do array"],
      },
      {
        title: "13. Objetos",
        topics: ["O que são objetos", "Como acessar um valor de objeto", "Como acessar funções dentro de objetos"],
      },
    ],
  },
  {
    name: "React",
    icon: <Code className="h-5 w-5" />,
    color: "text-cyan-600",
    bgColor: "bg-cyan-100",
    borderColor: "border-cyan-200",
    modules: [
      {
        title: "14. Introdução ao React",
        topics: ["O que é a biblioteca", "Para que serve o React", "Como instalar o React", "Configuração do React"],
      },
      {
        title: "15. Componentes",
        topics: [
          "Como é o fluxo do React",
          "Criando a minha primeira linha",
          "O que são componentes",
          "Criando meu primeiro componente",
        ],
      },
      {
        title: "16. Renderizando JS",
        topics: [
          "Como interagir JS + HTML",
          "Renderizando uma lista",
          "Como renderizar condicional",
          "Compartilhando informações",
        ],
      },
    ],
  },
  {
    name: "Git",
    icon: <GitBranch className="h-5 w-5" />,
    color: "text-red-500",
    bgColor: "bg-red-100",
    borderColor: "border-red-200",
    modules: [
      {
        title: "17. Introdução ao Git",
        topics: ["Overview", "Para que serve", "Fluxo do Git"],
      },
      {
        title: "18. Instalando",
        topics: ["Como instalar", "Configurando o seu primeiro repo", "Criando o primeiro repositório"],
      },
      {
        title: "19. Como interagir com git",
        topics: [
          "Principais comandos",
          "git add",
          "git commit",
          "git push",
          "git branch",
          "Linkando com github",
          "Novas modificações",
        ],
      },
    ],
  },
]

export function Curriculum() {
  const [expandedTechs, setExpandedTechs] = useState<Record<string, boolean>>({})
  const [expandedModules, setExpandedModules] = useState<Record<string, boolean>>({})

  const toggleTech = (techName: string) => {
    setExpandedTechs((prev) => ({
      ...prev,
      [techName]: !prev[techName],
    }))
  }

  const toggleModule = (techName: string, moduleIndex: number) => {
    const key = `${techName}-${moduleIndex}`
    setExpandedModules((prev) => ({
      ...prev,
      [key]: !prev[key],
    }))
  }

  return (
    <section className="py-20">
      <div className="container mx-auto px-4">
        <div className="text-center mb-12">
          <h2 className="text-3xl font-bold mb-2 text-gray-800">O que vou aprender neste manual?</h2>
          <div className="w-20 h-1 bg-sky-500 mx-auto"></div>
          <p className="mt-4 text-gray-600 max-w-2xl mx-auto">
            Um guia completo para você dominar as tecnologias mais utilizadas no desenvolvimento frontend
          </p>
        </div>

        <div className="max-w-4xl mx-auto space-y-4">
          {curriculum.map((tech) => (
            <div
              key={tech.name}
              className={cn(
                "border rounded-lg overflow-hidden transition-all duration-300 shadow-sm",
                tech.borderColor,
                expandedTechs[tech.name] ? "border-opacity-100" : "border-opacity-50",
              )}
            >
              <button
                onClick={() => toggleTech(tech.name)}
                className={cn(
                  "w-full flex items-center justify-between p-4 text-left transition-colors",
                  tech.bgColor,
                  expandedTechs[tech.name] ? "bg-opacity-100" : "bg-opacity-50",
                )}
              >
                <div className="flex items-center gap-3">
                  <div className={cn("p-2 rounded-full", tech.bgColor)}>
                    <span className={tech.color}>{tech.icon}</span>
                  </div>
                  <h3 className={cn("font-bold text-lg", tech.color)}>{tech.name}</h3>
                </div>
                <ChevronDown
                  className={cn(
                    "h-5 w-5 transition-transform text-gray-600",
                    expandedTechs[tech.name] ? "rotate-180" : "",
                  )}
                />
              </button>

              {expandedTechs[tech.name] && (
                <div className="p-4 bg-white">
                  <div className="space-y-3">
                    {tech.modules.map((module, moduleIndex) => (
                      <div key={moduleIndex} className="border border-gray-200 rounded-md overflow-hidden">
                        <button
                          onClick={() => toggleModule(tech.name, moduleIndex)}
                          className="w-full flex items-center justify-between p-3 text-left bg-gray-50 hover:bg-gray-100 transition-colors"
                        >
                          <span className="font-medium text-gray-700">{module.title}</span>
                          <ChevronDown
                            className={cn(
                              "h-4 w-4 transition-transform text-gray-600",
                              expandedModules[`${tech.name}-${moduleIndex}`] ? "rotate-180" : "",
                            )}
                          />
                        </button>

                        {expandedModules[`${tech.name}-${moduleIndex}`] && (
                          <div className="p-3 space-y-2">
                            {module.topics.map((topic, topicIndex) => (
                              <div key={topicIndex} className="flex items-center gap-2">
                                <div className="w-1.5 h-1.5 rounded-full bg-sky-500"></div>
                                <span className="text-sm text-gray-600">{topic}</span>
                              </div>
                            ))}
                          </div>
                        )}
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>
          ))}
        </div>
      </div>
    </section>
  )
}
</file>

<file path="src/components/extra-links-modal.tsx">
"use client"

import { useState, useEffect } from "react"
import { X, ExternalLink, Link2, ImageIcon } from "lucide-react" // Added ImageIcon for default

interface ExtraLink {
  title: string
  url: string
  description?: string
  image?: string // Optional image URL
}

interface ExtraLinksModalProps {
  links: ExtraLink[]
}

export function ExtraLinksModal({ links }: ExtraLinksModalProps) {
  const [isOpen, setIsOpen] = useState(false)

  useEffect(() => {
    if (links && links.length > 0) { // Only open if there are links
      const timer = setTimeout(() => {
        setIsOpen(true)
      }, 500)
      return () => clearTimeout(timer)
    }
  }, [links]) // Add links to dependency array

  if (!links || links.length === 0) {
    return null
  }

  return (
    <>
      <button
        onClick={() => setIsOpen(true)}
        className="mx-auto mt-[15px] flex items-center gap-2 px-3 py-2 bg-sky-500 text-white rounded-full shadow-lg hover:bg-sky-600 transition-colors"
      >
        <Link2 className="h-4 w-4" />
        <span className="text-sm font-medium">Links extras</span>
      </button>

      {isOpen && (
        <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4">
          <div className="bg-white rounded-lg shadow-xl w-full max-w-md max-h-[80vh] overflow-hidden flex flex-col">
            <div className="flex items-center justify-between p-4 border-b border-gray-200">
              <h3 className="text-lg font-semibold text-gray-800">Links extras</h3>
              <button onClick={() => setIsOpen(false)} className="p-1 rounded-full hover:bg-gray-100 transition-colors">
                <X className="h-5 w-5 text-gray-500" />
              </button>
            </div>

            <div className="p-4 overflow-y-auto flex-grow">
              <div className="space-y-4">
                {links.map((link, index) => (
                  <a
                    key={index}
                    href={link.url}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="block p-4 border border-gray-200 rounded-lg hover:border-sky-200 hover:bg-sky-50 transition-colors"
                  >
                    <div className="flex items-start gap-3">
                      {link.image ? (
                        <img
                          src={link.image}
                          alt={link.title}
                          className="h-10 w-10 object-cover rounded flex-shrink-0 mt-0.5" // Adjusted size and added rounded
                        />
                      ) : (
                        <ExternalLink className="h-5 w-5 text-sky-500 mt-0.5 flex-shrink-0" />
                      )}
                      <div>
                        <h4 className="font-medium text-sky-600">{link.title}</h4>
                        {link.description && <p className="text-sm text-gray-600 mt-1">{link.description}</p>}
                      </div>
                    </div>
                  </a>
                ))}
              </div>
            </div>

            <div className="p-4 border-t border-gray-200 bg-gray-50">
              <button
                onClick={() => setIsOpen(false)}
                className="w-full py-2 bg-sky-500 text-white rounded-md hover:bg-sky-600 transition-colors"
              >
                Fechar
              </button>
            </div>
          </div>
        </div>
      )}
    </>
  )
}
</file>

<file path="vite.config.ts">
// vite.config.ts
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import path from 'path' // Import path

// Add this import if using TypeScript for config
import type { UserConfig } from 'vitest/config'

// Combine Vite config and Vitest config
const config: UserConfig & { test: any } = { // Use 'any' for test if types conflict initially
  plugins: [react()],
  resolve: { // Make sure alias resolution works in tests
    alias: {
      "@": path.resolve(__dirname, "./src"), // Adjust if your '@' alias points elsewhere
      "hooks": path.resolve(__dirname, "./hooks"),
      "lib": path.resolve(__dirname, "./lib"),
      "components": path.resolve(__dirname, "./src/components"),
    },
  },
  test: {
    globals: true,
    environment: 'jsdom',
    setupFiles: './src/setupTests.ts', // Path to setup file (we'll create this next)
    css: false, // Optional: Faster tests if CSS parsing isn't needed
    coverage: { // Optional: Add coverage reporting
      provider: 'v8',
      reporter: ['text', 'json', 'html'],
      include: ['src/**/*', 'hooks/**/*'],
      exclude: [
        'src/main.tsx',
        'src/index.css',
        'src/vite-env.d.ts',
        'src/setupTests.ts',
        '**/*.d.ts',
        '**/*.config.*', // Exclude config files
        '.eslintrc.cjs', // Exclude lint config
        'public/**/*', // Exclude public assets
        'dist/**/*', // Exclude build output
      ],
    }
  }
}

export default defineConfig(config)
</file>

<file path=".github/workflows/ci.yml">
name: Build and Test CI

on:
  push:
    branches: [ main, master ] # Adjust branch names if needed
  pull_request:
    branches: [ main, master ] # Adjust branch names if needed

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x] # Test on relevant Node versions

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm' # Or 'yarn', 'pnpm'

    - name: Install dependencies
      run: npm ci --legacy-peer-deps # Use 'ci' for faster, reliable installs in CI

    - name: Run tests
      run: npm test

    - name: Run build (Optional)
      run: npm run build
      env:
        CI: true # Often needed for builds

    # Optional: Upload coverage report
    # - name: Upload coverage reports to Codecov
    #   uses: codecov/codecov-action@v4 # Requires Codecov setup
    #   with:
    #     token: ${{ secrets.CODECOV_TOKEN }} # Add secret in GitHub repo settings
    #     files: ./coverage/coverage-final.json # Adjust path if needed
    #     fail_ci_if_error: true
</file>

<file path=".gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
dist
</file>

<file path="src/App.tsx">
import { Terminal } from "lucide-react"
import { Testimonials } from "./components/testimonials"
import { Curriculum } from "./components/curriculum"
import { BonusContent } from "./components/bonus-content"
import { CTAButton } from "./components/cta-button"
import { TopBanner } from "./components/top-banner"
import { StickyBanner } from "./components/sticky-banner"
import { ExtraLinksModal } from "./components/extra-links-modal"

const extraLinks = [
  {
    title: "Rocketseat ONE",
    url: "https://www.rocketseat.com.br/oferta/influencer/v2/julio",
    description: "10% de desconto na MELHOR plataforma de aprendizado de programação!",
    image: 'rocketseat_logo.jpg' // Example image URL
  }
]

function App() {
  return (
    <main className="min-h-screen bg-white text-gray-800 font-mono">
      <TopBanner />
      <StickyBanner />
      <ExtraLinksModal links={extraLinks} />
      <section className="relative pt-10 pb-32 overflow-hidden">
        <div className="absolute inset-0 z-0 opacity-10">
          <div className="absolute top-0 left-0 w-full h-full">
            {Array.from({ length: 20 }).map((_, i) => (
              <div
                key={i}
                className="absolute text-sky-500 text-opacity-20 text-xs"
                style={{
                  top: `${Math.random() * 100}%`,
                  left: `${Math.random() * 100}%`,
                  transform: `rotate(${Math.random() * 360}deg)`,
                }}
              >
                {`<${["div", "span", "code", "html", "body", "header", "footer", "main", "section"][Math.floor(Math.random() * 9)]}/>`}
              </div>
            ))}
          </div>
        </div>

        <div className="container mx-auto px-4 relative z-10">
          <div className="flex flex-col items-center text-center mb-12">
            <div className="inline-flex items-center justify-center p-2 bg-sky-100 rounded-full mb-6">
              <Terminal className="h-6 w-6 text-sky-500" />
            </div>
            <div className="text-sky-600 mb-2 text-sm tracking-widest uppercase">ojuliocode apresenta</div>
            <h1 className="text-4xl md:text-6xl lg:text-7xl font-bold mb-4 glitch-text-light">Magic Front</h1>
            <h2 className="text-2xl md:text-3xl lg:text-4xl mb-6 text-gray-700">O manual do desenvolvedor Frontend</h2>
            <p className="max-w-2xl text-lg text-gray-600 mb-8">
              Aprenda a desenvolver interfaces com tecnologias que as maiores empresas do mundo utilizam
            </p>

            <div className="flex flex-col md:flex-row gap-4 mb-12">
              <CTAButton primary text="Conferir meu desconto" href="https://pay.hotmart.com/Y88783634B" />
              <CTAButton text="Quero me tornar um programador" href="https://pay.hotmart.com/Y88783634B" />
            </div>

            <div className="flex items-center gap-4 p-4 border border-sky-200 rounded-lg bg-sky-50">
              <div className="text-xl font-bold line-through text-gray-400">R$54,90</div>
              <div className="text-3xl font-bold text-sky-600">R$10,00</div>
              <div className="text-sm px-2 py-1 bg-sky-500 text-white rounded">Oferta Limitada</div>
            </div>
          </div>

          <div className="relative mx-auto max-w-3xl">
            <div className="relative z-10 rounded-lg overflow-hidden border-2 border-sky-200 shadow-lg">
              <div className="bg-gray-100 p-1 flex items-center gap-2">
                <div className="w-3 h-3 rounded-full bg-red-500"></div>
                <div className="w-3 h-3 rounded-full bg-yellow-500"></div>
                <div className="w-3 h-3 rounded-full bg-green-500"></div>
                <div className="ml-2 text-xs text-gray-500">magic-front.jsx</div>
              </div>
              <div className="bg-white p-6 font-mono text-sm border-t border-gray-200">
                <div className="text-blue-600">
                  {"import "}
                  <span className="text-orange-500">{"React "}</span>
                  <span className="text-blue-600">{"from "}</span>
                  <span className="text-green-600">'react'</span>;
                </div>
                <div className="mt-2">
                  <span className="text-pink-600">{"const "}</span>
                  <span className="text-orange-500">{"MagicFront "}</span>
                  <span className="text-pink-600">{"= "}</span>
                  <span className="text-orange-500">{"() "}</span>
                  <span className="text-pink-600">{"=>"}</span>
                  <span className="text-orange-500">{" {"}</span>
                </div>
                <div className="ml-4 text-pink-600">{"return ("}</div>
                <div className="ml-8 text-blue-600">
                  {"<div "}
                  <span className="text-green-600">{"className"}</span>
                  <span className="text-gray-800">{"="}</span>
                  <span className="text-green-600">"developer-manual"</span>
                  <span className="text-blue-600">{">"}</span>
                </div>
                <div className="ml-12 text-blue-600">
                  {"<h1>"}
                  <span className="text-gray-800">Aprenda Frontend do Zero</span>
                  <span className="text-blue-600">{"</h1>"}</span>
                </div>
                <div className="ml-12 text-blue-600">
                  {"<p>"}
                  <span className="text-gray-800">HTML, CSS, JavaScript, React e Git</span>
                  <span className="text-blue-600">{"</p>"}</span>
                </div>
                <div className="ml-12 text-blue-600">
                  {"<button "}
                  <span className="text-green-600">{"type"}</span>
                  <span className="text-gray-800">{"="}</span>
                  <span className="text-green-600">"primary"</span>
                  <span className="text-blue-600">{">"}</span>
                  <span className="text-gray-800">Comprar Agora</span>
                  <span className="text-blue-600">{"</button>"}</span>
                </div>
                <div className="ml-8 text-blue-600">{"</div>"}</div>
                <div className="ml-4 text-pink-600">{");"}</div>
                <div className="text-orange-500">{"}"}</div>
                <div className="mt-2 text-blue-600">
                  {"export "}
                  <span className="text-pink-600">{"default "}</span>
                  <span className="text-orange-500">{"MagicFront"}</span>;
                </div>
              </div>
            </div>
            <div className="absolute -bottom-4 -right-4 -left-4 h-8 bg-gradient-to-t from-white to-transparent z-20"></div>
          </div>
        </div>
      </section>

      <Testimonials />

      <Curriculum />

      <BonusContent />

      <section className="py-20 relative overflow-hidden">
        <div className="absolute inset-0 bg-gradient-to-r from-sky-50 to-white opacity-70"></div>
        <div className="container mx-auto px-4 relative z-10">
          <div className="max-w-3xl mx-auto text-center">
            <h2 className="text-3xl md:text-4xl font-bold mb-6 text-sky-600">
              Comece sua jornada como desenvolvedor Frontend hoje
            </h2>
            <p className="text-lg mb-8 text-gray-600">
              Por apenas <span className="text-sky-600 font-bold">R$10,00</span>, você terá acesso a todo o conteúdo
              necessário para iniciar sua carreira na programação.
            </p>
            <div className="flex flex-col sm:flex-row justify-center gap-4">
              <CTAButton primary large text="Garantir minha oferta" href="https://pay.hotmart.com/Y88783634B" />
            </div>
            <div className="mt-8 text-sm text-gray-500">Formas de pagamento: Cartão de crédito e Pix</div>
          </div>
        </div>
      </section>
      <footer className="py-8 border-t border-gray-200">
        <div className="container mx-auto px-4">
          <div className="flex flex-col md:flex-row justify-between items-center">
            <div className="flex items-center mb-4 md:mb-0">
              <Terminal className="h-5 w-5 text-sky-500 mr-2" />
              <span className="text-sky-600 font-bold">Magic Front</span>
            </div>
            <div className="text-sm text-gray-500">© 2023 ojuliocode. Todos os direitos reservados.</div>
          </div>
        </div>
      </footer>
    </main>
  )
}

export default App
</file>

<file path="vite.config.js">
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
})
</file>

<file path="README.md">
# Olá devs!
- [Canal do youtube](https://youtube.com/@ojuliocode)
- [Tiktok](https://tiktok.com/@ojuliocode)
- [Insta](https://instagram.com/ojuliocode)
</file>

<file path="package.json">
{
  "name": "my-v0-project",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "vite dev",
    "build": "vite build",
    "start": "vite start",
    "lint": "vite lint",
    "predeploy": "npm run build",
    "deploy": "gh-pages -d dist",
    "test": "vitest",
    "coverage": "vitest run --coverage"
  },
  "dependencies": {
    "@hookform/resolvers": "^3.9.1",
    "@radix-ui/react-accordion": "^1.2.2",
    "@radix-ui/react-alert-dialog": "^1.1.4",
    "@radix-ui/react-aspect-ratio": "^1.1.1",
    "@radix-ui/react-avatar": "^1.1.2",
    "@radix-ui/react-checkbox": "^1.1.3",
    "@radix-ui/react-collapsible": "^1.1.2",
    "@radix-ui/react-context-menu": "^2.2.4",
    "@radix-ui/react-dialog": "^1.1.4",
    "@radix-ui/react-dropdown-menu": "^2.1.4",
    "@radix-ui/react-hover-card": "^1.1.4",
    "@radix-ui/react-label": "^2.1.1",
    "@radix-ui/react-menubar": "^1.1.4",
    "@radix-ui/react-navigation-menu": "^1.2.3",
    "@radix-ui/react-popover": "^1.1.4",
    "@radix-ui/react-progress": "^1.1.1",
    "@radix-ui/react-radio-group": "^1.2.2",
    "@radix-ui/react-scroll-area": "^1.2.2",
    "@radix-ui/react-select": "^2.1.4",
    "@radix-ui/react-separator": "^1.1.1",
    "@radix-ui/react-slider": "^1.2.2",
    "@radix-ui/react-slot": "^1.1.1",
    "@radix-ui/react-switch": "^1.1.2",
    "@radix-ui/react-tabs": "^1.1.2",
    "@radix-ui/react-toast": "^1.2.4",
    "@radix-ui/react-toggle": "^1.1.1",
    "@radix-ui/react-toggle-group": "^1.1.1",
    "@radix-ui/react-tooltip": "^1.1.6",
    "@vitejs/plugin-react": "latest",
    "autoprefixer": "^10.4.20",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cmdk": "1.0.4",
    "date-fns": "4.1.0",
    "embla-carousel-react": "8.5.1",
    "input-otp": "1.4.1",
    "jiti": "latest",
    "less": "latest",
    "lightningcss": "latest",
    "lucide-react": "^0.454.0",
    "next": "15.2.4",
    "next-themes": "^0.4.4",
    "react": "^19",
    "react-day-picker": "8.10.1",
    "react-dom": "^19",
    "react-hook-form": "^7.54.1",
    "react-resizable-panels": "^2.1.7",
    "recharts": "2.15.0",
    "sass": "latest",
    "sass-embedded": "latest",
    "sonner": "^1.7.1",
    "stylus": "latest",
    "sugarss": "latest",
    "tailwind-merge": "^2.5.5",
    "tailwindcss-animate": "^1.0.7",
    "terser": "latest",
    "tsx": "latest",
    "vaul": "^0.9.6",
    "vite": "latest",
    "yaml": "latest",
    "zod": "^3.24.1"
  },
  "devDependencies": {
    "@testing-library/dom": "^10.4.0",
    "@testing-library/jest-dom": "^6.6.3",
    "@testing-library/react": "^16.3.0",
    "@testing-library/user-event": "^14.6.1",
    "@types/node": "^22",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "@types/testing-library__jest-dom": "^6.0.0",
    "gh-pages": "^6.1.1",
    "jsdom": "^26.0.0",
    "postcss": "^8",
    "tailwindcss": "^3.4.17",
    "typescript": "^5",
    "vitest": "^3.1.1"
  }
}
</file>

<file path="src/index.css">
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --foreground-rgb: 55, 65, 81;
  --background-start-rgb: 255, 255, 255;
  --background-end-rgb: 255, 255, 255;
}

body {
  color: rgb(var(--foreground-rgb));
  background: linear-gradient(to bottom, transparent, rgb(var(--background-end-rgb))) rgb(var(--background-start-rgb));
}

@layer utilities {
  .glitch-text-light {
    position: relative;
    text-shadow: 0.05em 0 0 rgba(255, 0, 0, 0.2), -0.025em -0.05em 0 rgba(0, 125, 255, 0.2), 0.025em 0.05em 0
      rgba(0, 0, 255, 0.2);
    animation: glitch-light 500ms infinite;
  }

  @keyframes glitch-light {
    0% {
      text-shadow: 0.05em 0 0 rgba(255, 0, 0, 0.2), -0.025em -0.05em 0 rgba(0, 125, 255, 0.2), 0.025em 0.05em 0
        rgba(0, 0, 255, 0.2);
    }
    14% {
      text-shadow: 0.05em 0 0 rgba(255, 0, 0, 0.2), -0.025em -0.05em 0 rgba(0, 125, 255, 0.2), 0.025em 0.05em 0
        rgba(0, 0, 255, 0.2);
    }
    15% {
      text-shadow: -0.05em -0.025em 0 rgba(255, 0, 0, 0.2), 0.025em 0.025em 0 rgba(0, 125, 255, 0.2), -0.05em -0.05em 0
        rgba(0, 0, 255, 0.2);
    }
    49% {
      text-shadow: -0.05em -0.025em 0 rgba(255, 0, 0, 0.2), 0.025em 0.025em 0 rgba(0, 125, 255, 0.2), -0.05em -0.05em 0
        rgba(0, 0, 255, 0.2);
    }
    50% {
      text-shadow: 0.025em 0.05em 0 rgba(255, 0, 0, 0.2), 0.05em 0 0 rgba(0, 125, 255, 0.2), 0 -0.05em 0
        rgba(0, 0, 255, 0.2);
    }
    99% {
      text-shadow: 0.025em 0.05em 0 rgba(255, 0, 0, 0.2), 0.05em 0 0 rgba(0, 125, 255, 0.2), 0 -0.05em 0
        rgba(0, 0, 255, 0.2);
    }
    100% {
      text-shadow: -0.025em 0 0 rgba(255, 0, 0, 0.2), -0.025em -0.025em 0 rgba(0, 125, 255, 0.2), -0.025em -0.05em 0
        rgba(0, 0, 255, 0.2);
    }
  }

  @keyframes shimmer {
    0% {
      transform: translateX(-100%);
    }
    100% {
      transform: translateX(100%);
    }
  }

  .animate-shimmer {
    animation: shimmer 1.5s infinite;
  }
}
</file>

<file path="index.html">
<!DOCTYPE html>
<html lang="pt-BR">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Magic Front - O manual do desenvolvedor Frontend</title>
    <meta name="description" content="Aprenda a desenvolver interfaces com tecnologias que as maiores empresas do mundo utilizam" />
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
</file>

</files>
